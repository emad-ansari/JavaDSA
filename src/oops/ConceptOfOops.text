Differentiate JDK, JVM & JRE with respect to their use.
JVM => JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn't physically exist. It is a specification that provides a runtime environment in which Java bytecode can be executed. It can also run those programs which are written in other languages and compiled to Java bytecode.
-> JVM is the heart of the java programming language

The JVM performs the following main tasks:
1) Loads code
2) Verifies code
3) Executes code
4) Provides runtime environment

JRE => JRE is an acronym for Java Runtime Environment. It is also written as Java RTE. The Java Runtime Environment is a set of software tools which are used for developing Java applications. It is used to provide the runtime environment. It is the implementation of JVM. It physically exists. It contains a set of libraries + other files that JVM uses at runtime.


JDK => Java Development Kit aka JDK is the core component of Java Environment and provides all the tools, executables, and binaries required to compile, debug, and execute a Java Program. JDK is a platform-specific software and that’s why we have separate installers for Windows, Mac, and Unix systems. We can say that JDK is the superset of JRE since it contains JRE with Java compiler, debugger, and core classes.


About the Parameters Passed in Java =>  
           --> The fundamental concept for passing the parameters in modern programming languages is passing by value and passing by reference. 
               But, in Java, the pass by reference concept is degraded.It supports only the pass by value concept. 

           --> The primitive variables hold the actual values, whereas the non-primitive variables hold the reference variable. 
               However, both variables use stack memory to store the values.

           --> In Java, during the method invokation, a copy of each argument is created then passed to the method.

           --> In the case of primitive data types, it copies the value inside stack memory then pass it to the method.
               In the case of non-primitive data types, it points a reference in stack memory to actual data, which occurs in a heap. 
               When we pass an object, it will copy a reference from the stack memory and pass it to the called method.

What is Data Structure => A data structure is a storage that is used to store and organize data. It is a way of arranging data on a computer so that it can be accessed and updated efficiently.
                          A data structure is not only used for organizing the data. It is also used for processing, retrieving, and storing data. 

Classification of Data Structure :- data structures are classified in two types
                                    1) Linear data structures
                                    2) Non-Linear data structuers


Linear data structure :- Data structure in which data elements are arranged sequentially or linearly, where each element is attached to its 
                       previous and next adjacent elements, is called a linear data structure.                        
                       Examples of linear data structures are array, stack, queue, linked list, etc.


Static data structure :- Static data structure has a fixed memory size. It is easier to access the elements in a static data structure. 
                         An example of this data structure is an array.
Dynamic data structure:- In dynamic data structure, the size is not fixed. It can be randomly updated during the runtime which may be considered efficient concerning the memory (space) complexity of the code. 
                         Examples of this data structure are queue, stack, etc.                  


Non-linear data structure :- Data structures where data elements are not placed sequentially or linearly are called non-linear data structures. In a non-linear data structure, 
                             we can’t traverse all the elements in a single run only. Examples of non-linear data structures are trees and graphs.



what are classes => 1) class is just a logical construct/blue print or we can say a set of rule to make something that physically exist.
                    2) classes have some properties and behaviour.

what are objects => 1) Object are instance of class
                    2) Object are physical reality
                    3) this is the thing that actually occupying space in memory
                    4) eg. Human is class (which have properties like eye, legs, hand, ear, nose etc.. and have behaviour like eating food, walking, etc)
                       and we all are the object of Human class (whenever a new baby is born a new object is created of class Human)
                    


Access specifier/Modifier => in Java, Access modifiers help to restrict the scope of a class, constructor, variable,
                    method, or data member. It provides security,  accessibility, etc to the user depending upon the
                    access modifier used with the element

Types of Access Modifiers in Java =>
There are four types of access modifiers available in Java:
(1) Default – No keyword required
(2) Private
(3) Protected
(4) Public

1. Default Access Modifier :- When no access modifier is specified for a class, method, or data member –
                              It is said to be having the default access modifier by default. The data members,
                              classes, or methods that are not declared using any access modifiers i.e. having default
                              access modifiers are accessible only within the same package.

2. Private Access Modifier :- The private access modifier is specified using the keyword private.
                              The methods or data members declared as private are accessible only
                              within the class in which they are declared.
                              -> Any other class of the same package will not be able to access these members.


3. Protected Access Modifier :- The protected access modifier is specified using the keyword protected. The methods or data
                                members declared as protected are accessible within the same package or subclasses in same/different packages.

4. Public Access modifier :- The public access modifier is specified using the keyword public. The public access modifier has the widest scope
                          among all other access modifiers. Classes, methods, or data members that are declared as public are accessible from
                          everywhere in the program. There is no restriction on the scope of public data members.

Constructors => Constructors are special type of function in java which have no return type
                we can easily understand the what is constructor with the help of constructor properties.
                1) compiler automatically call the constructor when a new object is created of the class
                2) It has no return type
                3) Name of constructor is the same as className
                4) constructor are use to initialize the objects and variables
                5) when no constructor is explicitly provided in class java compiler will automatically create a default constructor

Types of Constructor : Constructors are three type
                       1) default constructor
                       2) parameterized constructor
                       3) copy constructor

1. Default Constructor in Java :- A constructor that has no parameters is known as default the constructor. A default constructor is invisible.

2. Parameterized Constructor in Java :- A constructor that has parameters is known as parameterized constructor. If we want to initialize fields
                                        of the class with our own values, then use a parameterized constructor.

3. Copy Constructor in Java :- Unlike other constructors copy constructor is passed with another object which copies the data available from the
                               passed object to the newly created object.


Method Overloading in Java => It is one of the feature of java. Method overloading allows us to use different method having the same name but with different
                              signature where the  signature can be differ by the number of inputs in the parameter or type of inputs parameter.
                              It is also known as compile time polymorphism.


(this) KEYWORD in java => In Java, ‘this’ is a reference variable that refers to the current object, or can be said “this” in Java is a keyword that refers to the
                          current object instance. It can be used to call current class methods and fields, to pass an instance of the current class as a parameter,
                          and to differentiate between the local and instance variables. Using “this” reference can improve code readability and reduce naming conflicts.
                          1) this can be refers to current class instance variable
                          2) this can be used to invoke current class method
                          3) this() can be used to invoke current class Constructor
                          4) this can be passed in argument of method call
                          5) this can be passed as argument to constructor call
                          6) this can be used to return the current class instance from the method


// Java code for using 'this' keyword to
// refer current class instance variables
class Test {
	int a;
	int b;

	// Parameterized constructor
	Test(int a, int b)
	{
		this.a = a;
		this.b = b;
	}

	void display()
	{
		// Displaying value of variables a and b
		System.out.println("a = " + a + " b = " + b);
	}

	public static void main(String[] args)
	{
		Test object = new Test(10, 20);
		object.display();
	}
}


"static" keyword in java => The static keyword is used for a constant variable or a method that is the same for every instance of a class.
                            The static keyword is a non-access modifier in Java that is applicable for the following:
                            (1) Blocks
                            (2) Variables
                            (3) Methods
                            (4) Classes

-> The static keyword belongs to the class than an instance of the class.
 Characteristics of static keyword:-
 1) Accessible without object instantiation:- Static members can be accessed without creating an object of a class.
 2) Associated with class, not objects:-  Static members are associated with the class, not with individual objects. This means that changes
    to a static member are reflected in all instances of the class,
 3) Cannot access non-static members:- Static methods and variables cannot access non-static members of a class, as they are not associated with any
    particular instance of the class.
 4) Can be overloaded, but not overridden:- Static methods can be overloaded, which means that you can define multiple methods with the same name but
   different parameters. However, they cannot be overridden, as they are associated with the class rather than with a particular instance of the class.


 // Java program to demonstrate that a static member
 // can be accessed before instantiating a class

 class Test
 {
     // static method
     static void m1()
     {
         System.out.println("from m1");
     }

     public static void main(String[] args)
     {
           // calling m1 without creating
           // any object of class Test
            m1();
     }
 }


Java Arrays => Java array is an object which contains elements of a similar data type. Additionally, The elements of an array are stored in a contiguous memory location.
               ->  It is a data structure where we store similar elements. We can store only a fixed set of elements in a Java array.

What are string in java => Strings are the type of objects that can store the character of values and in Java, every character is stored in 16 bits
                           -> String is a class in java but can be used like a primitive data-type
                           -> It is the most commonly used class in java
                           -> String are immutable in java(means that we can not change the String object)
                           eg. String a = "Kunal";
                               a = "Kushwaha";
                               here in this example we are not changing the value of (a) but we are creating a new string object("Kushwaha") in heap memory

Java StringBuffer Class => Java StringBuffer class is used to create mutable (modifiable) String objects. The StringBuffer class in Java is the same as String
                           class except it is muta  ble i.e. it can be changed.

Advantages of StringBuffer : 1) It is mutable
                             2) It is more efficient than String because no new object will created when we will modify it
                             3) Java StringBuffer class is thread-safe i.e. multiple threads cannot access it simultaneously. So it is safe and will result in an order.

Important Constructors of StringBuffer Class =>
        Constructors                                     Description

     StringBuffer()	                     It creates an empty String buffer with the initial capacity of 16.
     StringBuffer(String str)	         It creates a String buffer with the specified string..
     StringBuffer(int capacity)	         It creates an empty String buffer with the specified capacity as length.


Important methods of StringBuffer class =>
  1) append(String s) -> It is used to append the specified string with this string.
  2) insert(int offset, String s) -> It is used to insert the specified string with this string at the specified position.
  3) replace(int startIndex, int endIndex, String str) -> It is used to replace the string from specified startIndex and endIndex.
  4) reverse() -> 	is used to reverse the string.
  5) length() -> 	It is used to return the length of the string i.e. total number of characters.
  6) charAt(int index) -> It is used to return the character at the specified position.
  7) delete(int startIndex, int endIndex) -> It is used to delete the string from specified startIndex and endIndex.
  8) substring(int beginIndex) -> It is used to return the substring from the specified beginIndex.


String tokenizer in java => The java.util.StringTokenizer class allows you to break a String into tokens. It is simple way to break a String.
                            It is a legacy class of Java. The String Tokenizer class allows an application to break strings into tokens.
                            It implements the Enumeration interface. This class is used for parsing data

Constructors of the StringTokenizer Class =>
                            1) StringTokenizer(String str) ->    It creates StringTokenizer with specified string.
                            2) StringTokenizer(String str, String delim) -> It creates StringTokenizer with specified string and delimiter.

Methods Of StringTokenizer Class =>
                            1) countTokens()  -> Returns the total number of tokens present
                            2) hasMoreToken() -> Tests if tokens are present for the StringTokenizer’s string
                            3) nextToken()    -> Returns the next token from the given StringTokenizer.

Wrapper Class  in java =>   The wrapper class in Java provides the mechanism to convert primitive into object and object into primitive
                            autoboxing and unboxing feature convert primitives into objects and objects into primitives automatically.
                            The automatic conversion of primitive into an object is known as autoboxing and vice-versa unboxing.

Use of Wrapper classes in Java => Java is an object-oriented programming language, so we need to deal with objects many times like in Collections, Serialization,
                                  Synchronization, etc. Let us see the different scenarios, where we need to use the wrapper classes.

1) Change the value in Method: Java supports only call by value. So, if we pass a primitive value, it will not change the original value.
   But, if we convert the primitive value in an object, it will change the original value.
2) Serialization: We need to convert the objects into streams to perform the serialization.
   If we have a primitive value, we can convert it in objects through the wrapper classes

PROBLEM STATEMENT : Write programs to convert primitive data types to object and vice-versa
1) Primitive to object :- //Java program to convert primitive into objects
                          //Autoboxing example of int to Integer
                        public class WrapperExample1{
                            public static void main(String args[]){
                                //Converting int into Integer
                                int a = 20;
                                Integer i = Integer.valueOf(a);//converting int into Integer explicitly
                                Integer j = a;//autoboxing, now compiler will write Integer.valueOf(a) internally
                                System.out.println(a+" "+i+" "+j);
                            }
                        }

2) object to primitive => //Java program to convert object into primitives
                          //Unboxing example of Integer to int
                        public class WrapperExample2{
                            public static void main(String args[]){
                                //Converting Integer to int
                                Integer a = new Integer(3);
                                int i = a.intValue();//converting Integer to int explicitly
                                int j = a;//unboxing, now compiler will write a.intValue() internally

                                System.out.println(a+" "+i+" "+j);
                            }
                        }



Java API Packages  => A java package is a group of similar types of classes, interfaces and sub-packages.
                      Package in java can be categorized in two form, built-in package and user-defined package.
                      There are many built-in packages such as java, lang, awt, javax, swing, net, io, util, sql etc.
                      -> The package keyword is used to create a package in java.
                      //save as Simple.java
                    package myPackage;
                    public class Simple{
                        public static void main(String args[]){
                            System.out.println("Welcome to java api package");
                        }
                    }

Advantage of Java Package =>
                    1) Java package is used to categorize the classes and interfaces so that they can be easily maintained.
                    2) Java package provides access protection.
                    3) Java package removes naming collision. 

How to access package from another package?
    There are three ways to access the package from outside the package.

1) import package_name.*;
2) import package.classname;
3) fully qualified name.

1) Using packageName.* =>  If you use package.* then all the classes and interfaces of this package will be accessible but not subpackages.
                           The import keyword is used to make the classes and interface of another package accessible to the current package.
                        EXAMPLE:-
                        first package
                        //save by A.java
                        package pack;
                        public class A{
                            public void msg(){System.out.println("Hello");}
                        }

                        second package
                        //save by B.java
                        package myPackage;
                        import pack.*;
                        class B{
                          public static void main(String args[]){
                           A obj = new A();
                           obj.msg();
                          }
                        }


2) Using packageName.classname =>  If you import package.classname then only declared class of this package will be accessible.

                         EXAMPLE:-
                        first package

                        //save by A.java
                        package pack;
                        public class A{
                            public void msg(){System.out.println("Hello");}
                        }

                        second package
                        //save by B.java
                        package myPackage;
                        import pack.A;
                        class B{
                          public static void main(String args[]){
                           A obj = new A();
                           obj.msg();
                          }
                        }

3) Using fully qualified name => If you use fully qualified name then only declared class of this package will be accessible.
                                 Now there is no need to import. But you need to use fully qualified name every time when you are accessing the class or interface

                         EXAMPLE:-
                        first package

                        //save by A.java
                        package pack;
                        public class A{
                            public void msg(){System.out.println("Hello");}
                        }

                        second package
                        //save by B.java
                        package myPackage;

                        class B{
                          public static void main(String args[]){
                           pack.A obj = new A(); // using fully qualified name
                           obj.msg();
                          }
                        }


Inheritance in java =>  Java, Inheritance is an important pillar of OOP(Object-Oriented Programming).
                        It is the mechanism in Java by which one class is allowed to inherit the features(fields and methods) of another class.
                        The idea behind inheritance in Java is that you can create new classes that are built upon existing classes. When you inherit
                        from an existing class, you can reuse methods and fields of the parent class. Moreover, you can add new methods and fields in your current class also.

Keyword used for inheritance: - "extends"



// Java Program to illustrate Inheritance (concise)

import java.io.*;

// Base or Super Class
class Employee {
    int salary = 60000;
}

// Inherited or Sub Class
class Engineer extends Employee {
    int benefits = 10000;
}

// Driver Class
class Driver {
    public static void main(String args[])
    {
        Engineer E1 = new Engineer();
        System.out.println("Salary : " + E1.salary + "\nBenefits : " + E1.benefits);
    }
}


Java Inheritance Types =>
Below are the different types of inheritance which are supported by Java.

1) Single Inheritance
2) Multilevel Inheritance
3) Hierarchical Inheritance
4) Multiple Inheritance // not supported in java using (but can be achieve using interfaces)
5) Hybrid Inheritance

Advantages of Inheritance in java =>
1) Code Re-usability: The code written in the Superclass is common to all subclasses. Child classes can directly use the parent class code.
2) Method Overriding: Method Overriding is achievable only through Inheritance. It is one of the ways by which Java achieves Run Time Polymorphism.
3) Abstraction: The concept of abstract where we do not have to provide all details is achieved through inheritance. Abstraction only shows the functionality to the user


"final" Keyword in Java => final keyword is used in different contexts. First of all, final is a non-access modifier applicable only to a variable, a method, or a class.
                           The following are different contexts where final is used.

                           Final variable -> to create constant variable
                           Final Methods  -> Prevent method overriding
                           Final Class    -> to prevent Inheritance

Example of final variable =>
class Bike9{
     final int speedLimit=90;//final variable
     void run(){
        speedLimit=400;  // compile time error
     }
    public static void main(String args[]){
         Bike9 obj=new  Bike9();
         obj.run();
    }
}//end of class


Example of final method =>
class Bike{
  final void run(){System.out.println("running");}
}

class Honda extends Bike{
   void run(){  // can't override final method hence give compile time error
        System.out.println("running safely with 100kmph");
   }

   public static void main(String args[]){
        Honda honda= new Honda();
        honda.run();
   }
}


Example of final class =>

final class Bike{}

class Honda1 extends Bike{  // can't inherit the final class hence it will give compile time error.
  void run(){System.out.println("running safely with 100kmph");}

  public static void main(String args[]){
      Honda1 honda= new Honda1();
      honda.run();
  }
}

QUESTION(1): Is final method inherited?
ANS:- Yes, final method is inherited but you cannot override it.

QUESTION(2): Can we initialize blank final variable?
ANS:-  Yes, but only in constructor. For example:
class Bike10{
  final int speedlimit;//blank final variable

  Bike10(){
      speedlimit=70;
      System.out.println(speedlimit);
  }

  public static void main(String args[]){
    new Bike10();
 }
}

"Super" Keyword in Java => The super keyword in Java is a reference variable which is used to refer immediate parent class object.
                           Whenever you create the instance of subclass, an instance of parent class is created implicitly which is
                           referred by super reference variable.

Usage of Java super Keyword =>
                            1) super can be used to refer immediate parent class instance variable.
                            2) super can be used to invoke immediate parent class method.
                            3) super() can be used to invoke immediate parent class constructor.

Example of first point :- class Animal{
                            String color="white";
                          }
                          class Dog extends Animal{
                            String color="black";
                            void printColor(){
                                System.out.println(color);//prints color of Dog class
                                System.out.println(super.color);//prints color of Animal class
                            }
                          }
                          class TestSuper1{
                            public static void main(String args[]){
                            Dog d=new Dog();
                            d.printColor();
                          }}


Example of second point:- class Animal{
                              void eat(){System.out.println("eating...");}
                          }
                          class Dog extends Animal{
                              void eat(){System.out.println("eating bread...");}
                              void bark(){System.out.println("barking...");}
                              void work(){
                              super.eat();
                              bark();

                          }


Example of third point:- class Animal{
                            Animal(){System.out.println("animal is created");}
                         }
                         class Dog extends Animal{
                            Dog(){
                            super();  // this will call the constructor of parent class which is "Animal"
                            System.out.println("dog is created");
                         }

Method Overriding => If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.
                     In other words, If a subclass provides the specific implementation of the method that has been declared by one of its parent class,
                     it is known as method overriding. It is also called run time polymorphism or dynamic binding.

Rules for Java Method Overriding =>
    1) The method must have the same name as in the parent class
    2) The method must have the same parameter as in the parent class.
    3) There must be an IS-A relationship (inheritance).


QUESTION :- Can we override static method?
ANS:- No, a static method cannot be overridden.


Difference Between Method Overloading and Method Overriding in Java =>

                Method Overloading                                             Method Overriding
     1) Method overloading is a compile-time polymorphism.              1) Method overriding is a run-time polymorphism.
     2) Method overloading may or may not require inheritance.          2) Method overriding always needs inheritance
     3) In method overloading, methods must have the same               3) In method overriding, methods must have the same name and same signature.
        name and different signatures.
     4) Static binding is being used for overloaded methods.            4) Dynamic binding is being used for overriding methods.

Abstraction in Java(pillar of OOps) => Abstraction is a process of hiding the implementation details and showing only functionality to the user.
                                       Another way, it shows only essential things to the user and hides the internal details,
                                       for example, sending SMS where you type the text and send the message. You don't know the internal
                                       processing about the message delivery.


Abstract class in Java => A class which is declared as abstract is known as an abstract class. It can have abstract and non-abstract methods.
                          -> It needs to be extended
                          -> Abstract method must be overridden.
                          -> Abstract classes cannot be instantiated.



Interface in Java => An interface in Java is a blueprint of a class. It has static and final variables and abstract methods.
                     The interface in Java is a mechanism to achieve abstraction. There can be only abstract methods in the Java interface, not method body.
                     It is used to achieve abstraction and multiple inheritance in Java.
                     -> we can not create constructor of interface

Why use Java interface?
    1) It is used to achieve abstraction.
    2) By interface, we can support the functionality of multiple inheritance.
    3) It can be used to achieve loose coupling.


Java Inner Classes (Nested Classes) =>
           Java inner class or nested class is a class that is declared inside the class or interface.
           We use inner classes to logically group classes and interfaces in one place to be more readable and maintainable.
           Additionally, it can access all the members of the outer class, including private data members and methods.

Types of Inner classes =>   There are four type of Inner class

1) Nested Inner Class -> have access any private member of outer class
2) Method Local Inner Classes -> A class inside a method/function is known as method local inner class. declared inside method of outer class
3) Static Nested Classes -> Static nested classes are not technically inner classes. They are like a static member of outer class. 
4) Anonymous Inner Classes -> A class having no name and having defined inside another class is known as Anonymous Inner class 




Exception Handling in java => An exception is an event that disrupts the normal flow of program. Exception handling is a
                              mechanism to handle the run time errors such as classNotFound , I/O, SQL remote etc.

Error verses Exception =>

               ERROR                                           EXCEPTION
  1) It is impossible to recover from error                    1) It is possible to recover form exception
  2) Error are unchecked type                                  2) It can be checked or unchecked
  3) Error happens at run time                                 3) Exception happens at compile time & run time
  4) It is Caused by the environment on which                  4) It is caused by application
     application is running


Exception Hierarchy =>  The java.lang.Throwable class is the root class of Java Exception hierarchy inherited by two subclasses: Exception and Error.
                        The hierarchy of Java Exception classes is given below

                                           Objects
                                             |
                                          Throwable
                                             |
                             ------------------------------------------
                             |                                        |
                         Exception                                   Errors
                           |                                           |
         -------------------------------------                 ----------------------------------------
         |                                    |                |                                      |
      Checked Exception             Unchecked Exception     virtual Machine error                Assertion error



Difference between Checked Exception and  Unchecked Exception :-

Checked Exception => 1) An exception that is checked by the compiler at compile time
                     2) These exception cannot be simply ignored, programmer should handle these exception.
                     3) eg. I/O exception

Unchecked Exception => 1) An exception that occurs at time of program execution.
                       2) These are also called Run-time exception.
                       3) Runtime exception are ignored at time of compilation
                       4) eg. Array out of bound exception
                       5) These are built in exception in java


Basic example format of exception ->

class Exception {
    public static void main(String[] args){
        try {
            //code that may raise exception.
        }
        catch(Exception e){
            //catch block is called exception handler.
            // when an exception is throw from try block it is catch by the suitable catch block and now whole flow of program is controlled by this block;
        }
    }
}


Some built in exception in java =>
    1) ArithmeticException
    2) ArrayIndexOutOfBoundException
    3) ClassNotFoundException
    4) IOException
    5) InterruptException
    6) NoSuchMethodException
    7) RunTimeException
    8) NullPointerException


 Difference between throw and throws =>
  throw :- 1) Used to explicitly throw an exception
           2) checked exception can not be propagated using throw only
           3) followed by an instance
           4) used within a method
           5) can not throw multiple exception


  throws :- 1) used to declare an exception
            2) checked exception can be propagated
            3) followed by class
            4) used within a method signature
            5) can declare multiple exception



 USER DEFINED EXCEPTION => some time built-in exception of java does not match to a specific scenario so we define a custom
                           exception with a proper message so that we can handle that exception
                           --> custom exception is defined by extending Exception class in java.
                           --> eg. suppose we define a age validation function to check that age is not less than zero if it is zero then we can define a
                           custom exception for this which will throw AgeLessThanZeroException if age is less than zero


Thread =>  Before introducing the thread concept, we were unable to run more than one task in parallel.
           It was a drawback, and to remove that drawback, Thread Concept was introduced.
           A Thread is a very light-weighted process, or we can say the smallest part of the process that allows a program
           to operate more efficiently by running multiple tasks simultaneously.(ek saath)

           Another benefit of using thread is that if a thread gets an exception or an error at the time of its execution,
           it doesn't affect the execution of the other threads. All the threads share a common memory and have their own stack,
           local variables and program counter When multiple threads are executed in parallel at the same time, this process is
           known as Multithreading.


Difference between Concurrency and Parallelism = > 

    Concurrency :- Concurrency is the task of running and managing the multiple computations at the same time.

    Parallelism :- Parallelism is the task of running multiple computations simultaneously.
    

Thread life cycle =>
 1) New :- instance of thread is created which is not yet started by invoking start()
 2) Runnable :- After invocation of start() method  & before it is selected to be run by the schedular.
 3) Running :- After thread schedular has selected it 
 4) Non-Runnable :- Thread is alive but not eligible to run.
 5) Terminated :- run() method has exited.




 Thread Priority => Each thread has a priority. Priorities are represented by a number between 1 and 10.
                    In most cases, the thread scheduler schedules the threads according to their priority (known as preemptive scheduling).
                    But it is not guaranteed because it depends on JVM.
                    --> a Java programmer can also assign the priorities of a thread explicitly in a Java program.


Synchronization in Java => Synchronization in Java is the capability to control the access of multiple threads to any shared resource.
                           Java Synchronization is better option where we want to allow only one thread to access the shared resource.
POITNS TO REMEMBER : -
-> In Java, synchronization is a mechanism which ensures that only one thread at a time can access a shared resource or critical section of code.
-> It helps prevent data inconsistencies and ensures that multiple threads do not interfere with each other when working with shared data.
-> In Java, synchronization is typically achieved using the synchronized keyword or by using explicit locks provided by the java.util.concurrent.locks package.

Why use Synchronization? =>
        The synchronization is mainly used to
        To prevent thread interference.
        To prevent consistency problem.


Types of Synchronization => 1) Process Synchronization
                            2) Thread Synchronization


Concept of Generics in java => 
    The java Generics programming is introduce in J2SE to deal with type-safe objects. It makes the code stable
    by detecting the bugs at compile time.
    -> Generics means parameterized type. Using generics it is possible to create classes that work with different
    data type
    

Types of generics in java
1) Generics method : Generic java method takes parameter and returns some value after performing some task. 
                     Here the method has a type parameter. This allows the generic method to be used in a more general way.
                     The compiler takes care of the type of safety which enables programmers to code easily since they 
                     do not have to perform long, individual type castings.

2) Generic Classes: A generic class is implemented exactly like a non-generic class. The only difference is that it contains a type parameter section.
                    There can be more than one type of parameter, separated by a comma. The classes, which accept one or more parameters, 
                    are known as parameterized classes or parameterized types.






Different between class and interface => 

                Class                                                    Interface
 1) The keyword used to create a class is “class”                     1) The keyword used to create an interface is “interface”
 2) A class can be instantiated i.e., objects of a                    2) An Interface cannot be instantiated i.e. objects cannot be created.
 class can be created.
 3) Classes do not support multiple inheritance.                      3) The interface supports multiple inheritance.
 4) It can contain constructors.                                      4) It can not contain constructor
 5) It cannot contain abstract methods.                               5) Interface can contain abstaract method


 What is use of Interface in java => In java interface is reference type similar to class in java. It is the collections 
 of abstract method. Interfaces are used to achieve abstraction and multiple inheritence in java.
 They allow us to declare methods without providing a method body. Classes that implement interfaces must provide concrete 
 implementations for all the methods declared in the interface.